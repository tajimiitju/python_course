PYTHON DATA STRUCTURE
SET:

mySet = set()

dir(mySet)



#add
help(mySet.add)

mySet.add(5)
mySet.add('Five')
mySet.add(True)
mySet.add(5.55)
mySet.add(5 + 5.5j)
len(mySet)


mySet.add(5)

len(mySet)

#remove discard
help(mySet.remove)
help(mySet.discard)

mySet.remove('Five')
mySet.remove('Five')

mySet.discard(5)
mySet.discard(5)


#Faster Way to make set
mySet2 = set([1,2.3,False,'Two'])
len(mySet2)


mySet2.clear()
len(mySet2)



#Intergers in 1-10
oddSeries 		= set([1,3,5,7,9])
evenSeries 		= set([2,4,6,8,10])
primeSeries 	= set([2,3,5,7])
compositeSeries = set([4,6,8,9,10])


oddSeries.union(evenSeries)
oddSeries.intersection(primeSeries)
primeSeries.union(compositeSeries)



#conditions
6 in evenSeries
9 not in evenSeries







Lists :
myList = ['aam','jaam','kathal','komola','narikel']
len(myList)


dir(myList)
help(myList.append)
myList.append('lichu')

len(myList)

print(myList[2])
print(myList[-1])
print(myList[-4])


#Slicing
print(myList[2:5])
print(myList[-4:-1])


myList2 = [1, 2, 3, 4, 5, 1, 2] #A set can store duplicate values.
print( myList2)


#concatintion
print(myList + myList2)
myList.extend(myList2)

#Show each functions of List




#Dictionary

myDict = {"name" : "jayanta", "male" : True, "height" : 1.70}

myDict2 = dict(name = "sara", male = False)

myDict2["height"] = 1.56
myDict2["age"] = 23

print(myDict)
print(myDict2)

#acessing data
print(myDict['name'])


print(myDict['BMI'])



if 'BMI' in myDict:
	print(myDict['BMI'])
else:
	print("This key doesnot contains in the dictionary")
	
	
	
try:
    print(myDict['BMI'])
except KeyError:
    print("This key doesnot contains in the dictionary")	

	
print(myDict.get('BMI',"None"))

print(myDict)
myDict.clear()
print(myDict)


newDict = myDict.fromkeys(('name','male'))


print(myDict)
myDict.pop('name')
print(myDict)





#Tuple

myList = [1, 2, 3, 4, 5]

myTuple = (1, 2, 3, 4, 5)

print(len(myList))
print(len(myTuple))



print(dir(myList))
print("-" * 100)
print(dir(myTuple))




import sys


print(sys.getsizeof(myList))
print(sys.getsizeof(myTuple))




import timeit as ti

listTime = ti.timeit(stmt = "[1,2,3,4,5]",number=1000000)
tupleTime = ti.timeit(stmt = "(1,2,3,4,5)",number=1000000)



print(listTime)
print(tupleTime)


a = ("a")
b = ("a", "b")
c = ("a", "b", "c")

print(a , "\n" , b, "\n" , c)



a = 1,
b = 1,2
c = 1,2,3

print(a , "\n" , b, "\n" , c)




# loops

mL = [1,2,3,4,5]

for m in mL




mL = [1,2,3,4,5]

for m in mL:
    if m == 3:
        print("found")
#         break
        continue
    
    print (m)
	
	
	
	
list(range(5))



for m in range(6):
    print (m)
	
	
	
x = 0
while x < 10:
    print(x)
    x +=1
	
	
	
	
	
	
	
	
#Functions :

dir()

def myFunc ():
    pass
	
dir()	





def myF ():
    print("Nothing ! ")
    
myF()



import math
def myF (r):
    print(math.pi * r**2)
    
myF(4)



def triangle (b,h):
    print("Area of a triangle : ", .5*b*h)
    
triangle(4,5)




def defaltArg (x = 0):
   return x*3

print(defaltArg (x=5))




def defaltArg1 (y, x = 0):
   return x*3 + y

print(defaltArg1 (5, x=5)